plugins {
    id 'com.android.application'
    id "com.github.hierynomus.license" version "0.16.1"
}

tasks.configureEach { task ->
    if (task.name == 'assembleRelease') {
//        task.dependsOn('connectedAndroidTest')
        task.dependsOn('testDebugUnitTest')
    }

    if (task.name == 'assembleDebug')
        task.dependsOn('testDebugUnitTest')

}

android {
    ndkVersion '27.1.12297006'

    defaultConfig {
        applicationId "com.paddlesandbugs.dahdidahdit"
        compileSdk 34
        minSdkVersion 24
        targetSdkVersion 34
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        configureEach {
            resValue "string", "app_version_name", appVersionName
        }

        release {
            minifyEnabled true // Try @Keep on classes and methods that get pruned but shouldn't
        }

        debug {
            pseudoLocalesEnabled true
        }
    }

    externalNativeBuild {
        cmake {
            version '3.30.5'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        viewBinding true
    }

    namespace 'com.paddlesandbugs.dahdidahdit'
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference:1.2.1'

    def room_version = "2.6.1"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.6.0'
}


license {
    header = file('LICENSE.txt')
    include "**/*.java"
    skipExistingHeaders false
    ext.year = Calendar.getInstance().get(Calendar.YEAR)

    mapping {
        java='dahdidahdit'
    }

    headerDefinitions {
        dahdidahdit {
            firstLine = ""
            endLine   = "\n"
            firstLineDetectionPattern = "/Copyright/"
            lastLineDetectionPattern  = "//"
            allowBlankLines = false
            skipLinePattern = "//"
            isMultiline = false
        }
    }
}


tasks.register('tidy', Delete) {
    doLast {
        println("Deleting build directory")
        delete project.buildDir
    }
}


tasks.register('apk') {
    doLast {
	group = "Build"
	description = "Generates a signed APK ready for installing"

	Properties properties = new Properties()
	properties.load(project.rootProject.file("local.properties").newDataInputStream())
	String keystoreDir = properties.getProperty("keystore.dir", "")

	def outputDir = "${buildDir}/outputs/apk/release"
	def version = project.android.defaultConfig.versionName
	def apkName = "dahdidahdit-${version}.apk"
	println("Building APK")
	println("Project name: ${project.name}")
	println("Build dir: ${buildDir}")
	println("SDK dir: ${project.android.sdkDirectory}")
	println("Version: ${version}")
	println("Keystore dir: ${keystoreDir}")

	exec {
		workingDir "${outputDir}"
		executable "${project.android.sdkDirectory}/build-tools/33.0.1/zipalign"
		args '-v', '-p', '4', '-f', "app-release-unsigned.apk", "dahdidahdit-unsigned-aligned.apk"
	}
	exec {
		workingDir "${outputDir}"
		executable "${project.android.sdkDirectory}/build-tools/33.0.1/apksigner"
		args 'sign', '--ks',  "${keystoreDir}/android-keystore-dahdidahdit-production.jks", '--out', "${apkName}", 'dahdidahdit-unsigned-aligned.apk'
		standardInput System.in
	}

	copy {
		from ("${outputDir}") {
			include apkName
		}
		into "${projectDir}/.."
	}
	
	println("Aligned and signed APK at ${apkName}")
    }
}


tasks.register('printVersionName') {
    doLast {
        println android.defaultConfig.versionName
    }
}


// Copy resources to intermediates so they can be accessed during unit testing.
tasks.register("copyResDirectoryToClassesMain") {
    doLast {
        copy {
            from "${projectDir}/src/main/res"
            into "${buildDir}/intermediates/javac/debugUnitTest/classes/"
        }
    }
}


preBuild {
    dependsOn tasks.named("license")
    dependsOn(copyResDirectoryToClassesMain)
}

